import UIKit

class DessertsViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {

    var desserts: [Dessert] = [
        Dessert(name: "Cheesecake", image: "cheesecake", price: 108, weight: 150, calories: 450, sweetnessLevel: "High"),
        Dessert(name: "Brownie", image: "brownie", price: 72, weight: 120, calories: 350, sweetnessLevel: "Medium"),
        Dessert(name: "Macaron", image: "macaron", price: 45, weight: 30, calories: 70, sweetnessLevel: "Medium")
        //Puedo agregar mÃ¡s
    ]
    
    var cart: [Dessert] = []
    
    private let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        return UICollectionView(frame: .zero, collectionViewLayout: layout)
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Postres"
        view.backgroundColor = .white
        
        collectionView.register(DessertCell.self, forCellWithReuseIdentifier: "DessertCell")
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.backgroundColor = .white
        
        view.addSubview(collectionView)
        collectionView.frame = view.bounds
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return desserts.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "DessertCell", for: indexPath) as! DessertCell
        let dessert = desserts[indexPath.item]
        cell.configure(with: dessert)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let dessert = desserts[indexPath.item]
        let detailVC = DessertDetailViewController(dessert: dessert)
        detailVC.onAddToCart = { [weak self] in
            self?.cart.append(dessert)
        }
        present(detailVC, animated: true)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 200, height: 200)
    }
}

class DessertCell: UICollectionViewCell {
    private let imageView: UIImageView = {
        let imageView = UIImageView()
        imageView.contentMode = .scaleAspectFill
        imageView.clipsToBounds = true
        return imageView
    }()
    
    private let nameLabel: UILabel = {
        let label = UILabel()
        label.textAlignment = .center
        return label
    }()
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        contentView.addSubview(imageView)
        contentView.addSubview(nameLabel)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        imageView.frame = CGRect(x: 0, y: 0, width: contentView.frame.size.width, height: contentView.frame.size.height - 40)
        nameLabel.frame = CGRect(x: 0, y: contentView.frame.size.height - 40, width: contentView.frame.size.width, height: 40)
    }
    
    func configure(with dessert: Dessert) {
        imageView.image = UIImage(named: dessert.image)
        nameLabel.text = dessert.name
    }
}
